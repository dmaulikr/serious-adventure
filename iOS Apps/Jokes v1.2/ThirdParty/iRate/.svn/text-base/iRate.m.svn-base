//
//  iRate.m
//  iRate
//
//  Created by Nick Lockwood on 26/01/2011.
//  Copyright 2011 Charcoal Design. All rights reserved.
//

#import "iRate.h"

NSString * const iRateRatedVersionKey = @"iRateRatedVersionChecked";
NSString * const iRateDeclinedVersionKey = @"iRateDeclinedVersion";
NSString * const iRateLastRemindedKey = @"iRateLastReminded";
NSString * const iRateLastVersionUsedKey = @"iRateLastVersionUsed";
NSString * const iRateFirstUsedKey = @"iRateFirstUsed";
NSString * const iRateUseCountKey = @"iRateUseCount";
NSString * const iRateEventCountKey = @"iRateEventCount";
NSString * const iRateMacAppStoreBundleID = @"com.apple.appstore";

NSString * const iRateiOSAppStoreURLFormat = @"itms-apps://ax.itunes.apple.com/WebObjects/MZStore.woa/wa/viewContentsUserReviews?type=Purple+Software&id=%i";

//static iRate *sharedInstance = nil;

#define SECONDS_IN_A_DAY 86400.0


@interface iRate ( )

@property (nonatomic, retain) NSString *applicationVersion;

@end


@implementation iRate

@synthesize appStoreID;
@synthesize applicationName;
@synthesize applicationVersion;
@synthesize daysUntilPrompt;
@synthesize usesUntilPrompt;
@synthesize eventsUntilPrompt;
@synthesize remindPeriod;
@synthesize messageTitle;
@synthesize message;
@synthesize cancelButtonLabel;
@synthesize remindButtonLabel;
@synthesize rateButtonLabel;
@synthesize ratingsURL;
@synthesize disabled;
@synthesize debug;
@synthesize delegate;
@synthesize actionDelegate;

#pragma mark -
#pragma mark Lifecycle methods

- (iRate *)init
{
	if ((self = [super init]))
	{
		//register for iphone application events
		[[NSNotificationCenter defaultCenter] addObserver:self
												 selector:@selector(applicationLaunched:)
													 name:UIApplicationDidFinishLaunchingNotification
												   object:nil];
		
		if ( &UIApplicationWillEnterForegroundNotification )
		{
			[[NSNotificationCenter defaultCenter] addObserver:self
													 selector:@selector(applicationWillEnterForeground:)
														 name:UIApplicationWillEnterForegroundNotification
													   object:nil];
		}
		
		//application name and version
		self.applicationName = [[NSBundle mainBundle] objectForInfoDictionaryKey:(NSString *)kCFBundleNameKey];
		self.applicationVersion = [[NSBundle mainBundle] objectForInfoDictionaryKey:(NSString *)kCFBundleVersionKey];
		
		//usage settings - these have sensible defaults
//		usesUntilPrompt = 5;
//		eventsUntilPrompt = 5;
		
		// new optimized values
		usesUntilPrompt = 1;	
		eventsUntilPrompt = 1;

#if DEBUG
		daysUntilPrompt = 1.0f/24.0f/60.0f; // 1 minutes
		remindPeriod = 1.0f/24.0f/60.0f; // 1 minute
#else //APP_STORE or AdHoc or RELEASE
		//daysUntilPrompt = 1;
//		remindPeriod = 1;
		
		// new optimized values
		daysUntilPrompt = 1.0f/24.0f/60.0f/2.0f; // 30 seconds
		remindPeriod = 1;
#endif
		
		//message text, you may wish to customise these, e.g. for localisation
		self.messageTitle = NSLocalizedString( @"Rate Jets", @"" ); //set lazily so that appname can be included
		self.message = NSLocalizedString( @"We're working hard to make Jets helpful and we'd love to hear how we're doing.", @"" ); //set lazily so that appname can be included
		self.cancelButtonLabel = NSLocalizedString( @"No, Thanks", @"");
		self.remindButtonLabel = NSLocalizedString( @"Remind me later", @"");
		self.rateButtonLabel = NSLocalizedString( @"Rate Jets", @"" );
	}
	return self;
}

- (NSString *)messageTitle
{
	if (messageTitle)
	{
		return messageTitle;
	}
	return [NSString stringWithFormat:@"Rate %@", applicationName];
}

- (NSString *)message
{
	if (message)
	{
		return message;
	}
	return [NSString stringWithFormat:@"If you enjoy using %@, would you mind taking a moment to rate it? It won't take more than a minute. Thanks for your support!", applicationName];
}

- (NSURL *)ratingsURL
{
	if (ratingsURL)
	{
		return ratingsURL;
	}
	return [NSURL URLWithString:[NSString stringWithFormat:iRateiOSAppStoreURLFormat, appStoreID]];	
}

- (NSDate *)firstUsed
{
	return [[NSUserDefaults standardUserDefaults] objectForKey:iRateFirstUsedKey];
}

- (void)setFirstUsed:(NSDate *)date
{
	[[NSUserDefaults standardUserDefaults] setObject:date forKey:iRateFirstUsedKey];
	[[NSUserDefaults standardUserDefaults] synchronize];
}

- (NSDate *)lastReminded
{
	return [[NSUserDefaults standardUserDefaults] objectForKey:iRateLastRemindedKey];
}

- (void)setLastReminded:(NSDate *)date
{
	[[NSUserDefaults standardUserDefaults] setObject:date forKey:iRateLastRemindedKey];
	[[NSUserDefaults standardUserDefaults] synchronize];
}

- (NSUInteger)usesCount
{
	return [[NSUserDefaults standardUserDefaults] integerForKey:iRateUseCountKey];
}

- (void)setUsesCount:(NSUInteger)count
{
	[[NSUserDefaults standardUserDefaults] setInteger:count forKey:iRateUseCountKey];
	[[NSUserDefaults standardUserDefaults] synchronize];
}

- (NSUInteger)eventCount;
{
	return [[NSUserDefaults standardUserDefaults] integerForKey:iRateEventCountKey];
}

- (void)setEventCount:(NSUInteger)count
{
	[[NSUserDefaults standardUserDefaults] setInteger:count forKey:iRateEventCountKey];
	[[NSUserDefaults standardUserDefaults] synchronize];
}

- (BOOL)declinedThisVersion
{
	return [[[NSUserDefaults standardUserDefaults] objectForKey:iRateDeclinedVersionKey] isEqualToString:applicationVersion];
}

- (void)setDeclinedThisVersion:(BOOL)declined
{
	[[NSUserDefaults standardUserDefaults] setObject:(declined? applicationVersion: nil) forKey:iRateDeclinedVersionKey];
	[[NSUserDefaults standardUserDefaults] synchronize];
}

- (BOOL)ratedThisVersion
{
	return [[[NSUserDefaults standardUserDefaults] objectForKey:iRateRatedVersionKey] isEqualToString:applicationVersion];
}

- (void)setRatedThisVersion:(BOOL)rated
{
	[[NSUserDefaults standardUserDefaults] setObject:(rated? applicationVersion: nil) forKey:iRateRatedVersionKey];
	[[NSUserDefaults standardUserDefaults] synchronize];
}

- (void)dealloc
{
	[[NSNotificationCenter defaultCenter] removeObserver:self];
	[applicationName release];
	[applicationVersion release];
	[messageTitle release];
	[message release];
	[cancelButtonLabel release];
	[remindButtonLabel release];
	[rateButtonLabel release];
	[ratingsURL release];
	[super dealloc];
}

#pragma mark -
#pragma mark Methods

- (void)incrementUseCount
{
	self.usesCount ++;
}

- (void)incrementEventCount
{
	self.eventCount ++;
}

- (BOOL)shouldPromptForRating
{	
	debug( @"self.usesCount: %d", self.usesCount );
	debug( @"self.eventCount: %d", self.eventCount );
	
	//debug mode?
	if (debug)
	{
		debug( @"debug mode on! prompt!" );
		return YES;
	}
	
	//check if we've rated this version
	else if (self.ratedThisVersion)
	{
		debug( @"this version is rated" );
		return NO;
	}
	
	//check if we've declined to rate this version
	else if (self.declinedThisVersion)
	{
		debug( @"this version is declined for rating" );
		return NO;
	}
	
	//check how long we've been using this version
//	debug( @"self.firstUsed: %@", self.firstUsed );
	else if (self.firstUsed == nil || [[NSDate date] timeIntervalSinceDate:self.firstUsed] < daysUntilPrompt * SECONDS_IN_A_DAY)
	{
		debug( @"self.firstUsed: %@", self.firstUsed );
		debug( @"not enough time for prompting passed" );
		return NO;
	}
	
	//check how many times we've used it and the number of significant events
	else if (self.usesCount < usesUntilPrompt && self.eventCount < eventsUntilPrompt)
	{
		debug( @"not enough uses for rating" );
		return NO;
	}
	
	//check if within the reminder period
	else if (self.lastReminded != nil && [[NSDate date] timeIntervalSinceDate:self.lastReminded] < remindPeriod * SECONDS_IN_A_DAY)
	{
		debug( @"self.lastReminded: %@", self.lastReminded );
		debug( @"not within reminder period" );
		return NO;
	}
	
	debug( @"lets PROMPT" );
	
	//lets prompt!
	return YES;
}


- (void)promptForRating
{
	UIAlertView *alert = [[UIAlertView alloc] initWithTitle:self.messageTitle
													message:self.message
												   delegate:self
										  cancelButtonTitle:nil
										  otherButtonTitles:rateButtonLabel, cancelButtonLabel, nil];
	if (remindButtonLabel)
	{
		[alert addButtonWithTitle:remindButtonLabel];
	}
	
	[alert show];
	[alert release];
}


- (void)checkNetworkAvailability
{
	debug( @"START checking NETWORK" );
	//test for app store connectivity the simplest, most reliable way - by accessing apple.com
	NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:@"http://apple.com"] 
											 cachePolicy:NSURLRequestReloadIgnoringLocalCacheData
										 timeoutInterval:10.0];
	//send request
	[[NSURLConnection connectionWithRequest:request delegate:self] start];
}


- (void)promptIfNetworkAvailable
{
	debug( @"START checking NETWORK" );
	
	//test for app store connectivity the simplest, most reliable way - by accessing apple.com
	NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:@"http://apple.com"] 
											 cachePolicy:NSURLRequestReloadIgnoringLocalCacheData
										 timeoutInterval:10.0];
	//send request
	[[NSURLConnection connectionWithRequest:request delegate:self] start];
}

- (void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response
{
	//good enough; don't download any more data
	[connection cancel];
	
	//confirm with delegate
	if ([(NSObject *)delegate respondsToSelector:@selector(iRateShouldShouldPromptForRating)])
	{
		if (![delegate iRateShouldShouldPromptForRating])
		{
			return;
		}
	}
	
	[delegate iRateNetworkAvailable];
	
	//prompt user
//	[self promptForRating];
}

- (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error
{
	//could not connect
	if ([(NSObject *)delegate respondsToSelector:@selector(iRateCouldNotConnectToAppStore:)])
	{
		[delegate iRateCouldNotConnectToAppStore:error];
	}
}

- (void)applicationLaunched:(NSNotification *)notification
{
	debug( @"UIApplicationDidFinishLaunchingNotification received" );
	
	//check if this is a new version
	NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
	
	if ( ![[defaults objectForKey:iRateLastVersionUsedKey] isEqualToString:applicationVersion])
	{
		//reset counts
		[defaults setObject:applicationVersion forKey:iRateLastVersionUsedKey];
		[defaults setObject:[NSDate date] forKey:iRateFirstUsedKey];
		[defaults setInteger:0 forKey:iRateUseCountKey];
		[defaults setInteger:0 forKey:iRateEventCountKey];
		[defaults setObject:nil forKey:iRateLastRemindedKey];
		[defaults synchronize];
	}
	
	[self incrementUseCount];
	if (!disabled && [self shouldPromptForRating])
	{
		[self promptIfNetworkAvailable];
	}
}

- (void)applicationWillEnterForeground:(NSNotification *)notification
{
	debug( @"UIApplicationWillEnterForegroundNotification received" );
	[self incrementUseCount];
	if (!disabled && [self shouldPromptForRating])
	{
		[self promptIfNetworkAvailable];
	}
}

#pragma mark -
#pragma mark UIAlertViewDelegate methods

- (void)openRatingsPageInAppStore
{
	[[UIApplication sharedApplication] openURL:self.ratingsURL];
}

- (void)alertView:(UIAlertView *)alertView didDismissWithButtonIndex:(NSInteger)buttonIndex
{
	debug( @"pressed buttonIndex: %d", buttonIndex );
	if (buttonIndex == 1)
	{
		//ignore this version
		debug( @"no ratings for you!" );
		self.declinedThisVersion = YES;
	}
	else if (buttonIndex == 2)
	{
		//remind later
		debug( @"remind later" );
		self.lastReminded = [NSDate date];
	}
	else
	{
		//mark as rated
		debug( @"rate it!" );
		self.ratedThisVersion = YES;
		
		//go to ratings page
		[self openRatingsPageInAppStore];
	}
	
	[actionDelegate iRateAlertClosed];
}

- (void)logEvent:(BOOL)deferPrompt
{
	debug( @"events count incremented" );
	[self incrementEventCount];
}

- (void)logEvent
{
	[self logEvent: YES];
}

@end