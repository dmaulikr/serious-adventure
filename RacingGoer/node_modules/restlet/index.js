// Common types

String.prototype.equalsIgnoreCase = function(arg) {               
    return (new String(this.toLowerCase())
             ==(new String(arg)).toLowerCase());
};
String.prototype.equals = function(arg) {
	return (this.toString()==arg.toString());
};
String.prototype.startsWith = function(arg) {
	if (this.length>=arg.length) {
		for (var i = 0; i<arg.length; i++) {
			if (this.charAt(i)!=arg.charAt(i)) {
				return false;
			}
		}
		return true;
	} else {
		return false;
	}
};
String.prototype.toBoolean = function() {
	return (this=="true");
}

Array.prototype.getFirstValue = function(key, ignoreCase) {
	for (var cpt=0; cpt<this.length; cpt++) {
		var elt = this[cpt];
		if (elt instanceof Parameter) {
			if (ignoreCase && elt.getName().equalsIgnoreCase(key)) {
				return elt;
			}
			if (!ignoreCase && elt.getName().equals(key)) {
				return elt;
			}
		}
	}
	return null;
};

Array.prototype.add = function(element) {
	this.push(element);
};

Array.prototype.addAll = function(elements) {
	for (var i=0; i<elements.length; i++) {
		this.push(elements[i]);
	}
};

Array.prototype.isEmpty = function() {
	return (this.length==0);
};

Array.prototype.size = function() {
	return this.length;
};

Array.prototype.clear = function() {
	this.splice(0, this.length-1);
};

Array.prototype.indexOf = function(element) {
	for (var i=0; i<this.length; i++) {
		if (this[i]==element) {
			return i;
		}
	}
	return -1;
}

function isNumber(x) { 
	return ( (typeof x === typeof 1) && (null !== x) && isFinite(x) );
}

// Restlet

module.exports = {};

var core = module.exports["core"] = require('./lib/restlet-core');
module.exports["data"] = require('./lib/restlet-data');
//module.exports["engine"] = require('./lib/restlet-engine');
module.exports["representation"] = require('./lib/restlet-representation');
module.exports["resource"] = require('./lib/restlet-resource');
//module.exports["routing"] = require('./lib/restlet-routing');
module.exports["util"] = require('./lib/restlet-util');
module.exports["commons"] = require('./lib/commons');

for (var elt in core) {
	module.exports[elt] = core[elt];
}